{"ast":null,"code":"var _jsxFileName = \"/home/ice/supermedia/webapp/src/adminComponents/ServeRequest.js\";\nimport React, { Component } from \"react\";\nimport { makeGetRequest, makePostRequest } from \"../api_calls\";\nimport queryString from \"query-string\";\nimport Timeline from \"../components/Timeline\";\nimport SlideUpPanel from \"../components/SlideUpPanel\";\nimport { connect } from \"react-redux\";\nimport MakeRecommendations from \"./MakeRecommendations\";\nimport UserInfo from \"./UserInfo\";\nexport default class ServeRequest extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRecommendations = () => {\n      console.log('getting latest recommendations');\n      makeGetRequest(\"admin-recommendations?sub=\".concat(this.state.userSub, \"&req_id=\").concat(this.state.req_id), recs => {\n        console.log('recommendations:', recs);\n        this.setState({\n          recommendations: recs\n        });\n      });\n    };\n\n    this.imageReceived = () => {\n      console.log('img received');\n    };\n\n    this.format = () => {\n      var canvas = document.getElementById(\"canvas\");\n      var context = canvas.getContext(\"2d\");\n      /*var img = new Image();\n      img.onload = function() {\n          console.log('image loaded')\n          //context.drawImage(this, 40, 40);\n          // call next step in your code here, f.ex: nextStep();\n      };\n      img.crossOrigin = 'Anonymous'\n      img.addEventListener(\"load\", this.imageReceived, false);\n      img.src = 'https://s3-eu-west-1.amazonaws.com/Adla-data/public/recommended_items/85e24393-57a0-40b5-bf8b-855d0c2519e6'//this.state.recommendations[0].img_urls[0];\n      */\n\n      var img = React.createElement(\"img\", {\n        crossOrigin: \"anonymous\",\n        src: 'https://s3-eu-west-1.amazonaws.com/Adla-data/public/recommended_items/85e24393-57a0-40b5-bf8b-855d0c2519e6',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n      console.log('drawing img');\n      console.log(img);\n      context.drawImage(img, 40, 40);\n      var URL = canvas.toDataURL();\n      console.log(URL);\n      /*\n      setTimeout(\n          () =>{\n              var items = this.state.recommendations\n              items.map(\n                  (item, idx) => {\n                      console.log('formatter:', document.querySelector(`#formatter${idx}`))\n                      html2canvas(document.querySelector(`#formatter${idx}`),  \n                          { \n                              letterRendering: 1, \n                              allowTaint : true, \n                              scrollY: -window.scrollY,\n                              onrendered : function (canvas) { } \n                          }\n                      )\n                       .then(canvas => {\n                          document.querySelector('.body').appendChild(canvas)\n                          let URL = canvas.toDataURL()\n                          console.log('URL:', URL)\n                          this.setState({\n                              formatted:\n                                  [\n                                      {\n                                          dataURL: URL,\n                                          id: idx\n                                      },\n                                      ...this.state.formatted\n                                  ]\n                          })\n                       })\n                  }\n              )\n          },\n          2000\n      )\n      */\n    };\n\n    this.getFormatters = () => {\n      if (this.state.recommendations.length == 0) {\n        return null;\n      } // before recommendations recieved\n\n\n      var items = this.state.recommendations;\n      return items.map((item, idx) => {\n        item = {\n          idx,\n          src: item.img_urls[0],\n          price: \"$\".concat(100 * idx)\n        };\n        return React.createElement(Formatter, {\n          id: \"formatter\".concat(idx),\n          item: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.sendRecommendations = () => {\n      var loc = window.location.search;\n      var params = queryString.parse(loc);\n      var sub = params.sub;\n      var req_id = params.req_id;\n      var recs = this.state.recommendations;\n      console.log('RECS:', recs);\n      recs = recs.filter(rec => {\n        return rec.status == 'not yet recommended';\n      });\n      console.log('recs to recommend:', recs);\n      var body = {\n        recs,\n        action: 'recommend'\n      };\n      makePostRequest(\"update-recommendation?req_id=\".concat(req_id, \"&sub=\").concat(sub), body, () => {\n        console.log('recommendation made');\n        this.getRecommendations();\n      });\n    };\n\n    this.path = this.props.match.path;\n\n    var _params = queryString.parse(this.props.location.search);\n\n    console.log(_params);\n    this.state = {\n      userSub: _params.sub,\n      req_id: _params.req_id,\n      request: [],\n      currStatus: 'request',\n      formatting: [],\n      recommendations: [],\n      formatted: []\n    };\n    makeGetRequest(\"user-request?sub=\".concat(this.state.userSub, \"&req_id=\").concat(this.state.req_id), request => {\n      this.setState({\n        request: request\n      });\n    });\n    this.getRecommendations();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Request\"), React.createElement(UserInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Timeline, {\n      request: this.state.request,\n      recommendations: this.state.recommendations,\n      refresh: this.getRecommendations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(ChangeRequestStatusBtn, {\n      currStatus: this.state.currStatus,\n      refresh: this.getRecommendations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn\",\n      onClick: this.sendRecommendations,\n      style: {\n        backgroundColor: 'rgb(255, 0, 0, 0.5)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Send these recommendations\")), React.createElement(SlideUpPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass ChangeRequestStatusBtn extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getChangeOption = () => {\n      var currStatus = this.props.currStatus;\n      var option = !currStatus === \"request\" ? React.createElement(\"button\", {\n        className: \"btn\",\n        style: {\n          fontSize: \"12px\"\n        },\n        onClick: () => this.props.openSlideUp(React.createElement(ChangeStatus, {\n          status: currStatus,\n          refresh: this.props.refresh,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, this.statusToAction[currStatus]) : null;\n    };\n\n    this.statusToAction = {\n      'request': 'Make recommendations!',\n      'making recs': 'keep making recommendations'\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn\",\n      style: {\n        fontSize: \"12px\"\n      },\n      onClick: () => this.props.openSlideUp(React.createElement(ChangeStatus, {\n        refresh: this.props.refresh,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Make recommendations\"), this.getChangeOption());\n  }\n\n}\n\nconst Formatter = props => {\n  console.log('formatter props:', props);\n\n  if (!props.item) {\n    console.log('no item in props');\n    return null;\n  }\n\n  const _props$item = props.item,\n        idx = _props$item.idx,\n        src = _props$item.src,\n        price = _props$item.price;\n  console.log('SRC:', src);\n  return React.createElement(\"div\", {\n    id: props.id,\n    className: \"formatter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"idx\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"\".concat(idx + 1, \".\")), React.createElement(\"img\", {\n    crossOrigin: \"Anonymous\",\n    src: src,\n    alt: \"\",\n    className: \"img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, price));\n}; // SWITCH TO DETERMINE WHAT COMPONENT TO RENDER ON THE SLIDEUP PANEL\n\n\nconst ChangeStatus = props => {\n  const statusToTitle = {\n    'request': 'Make recommendations',\n    'making recs': 'Make recommendations'\n  };\n\n  switch (props.status) {\n    case 'request':\n      return React.createElement(MakeRecommendations, {\n        refresh: props.refresh,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      });\n\n    default:\n      return React.createElement(MakeRecommendations, {\n        refresh: props.refresh,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      });\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    openSlideUp: content => {\n      dispatch({\n        type: \"OPEN_SLIDEUP\",\n        content: content\n      });\n    }\n  };\n};\n\nChangeRequestStatusBtn = connect(null, mapDispatchToProps)(ChangeRequestStatusBtn);","map":{"version":3,"sources":["/home/ice/supermedia/webapp/src/adminComponents/ServeRequest.js"],"names":["React","Component","makeGetRequest","makePostRequest","queryString","Timeline","SlideUpPanel","connect","MakeRecommendations","UserInfo","ServeRequest","constructor","props","getRecommendations","console","log","state","userSub","req_id","recs","setState","recommendations","imageReceived","format","canvas","document","getElementById","context","getContext","img","drawImage","URL","toDataURL","getFormatters","length","items","map","item","idx","src","img_urls","price","sendRecommendations","loc","window","location","search","params","parse","sub","filter","rec","status","body","action","path","match","request","currStatus","formatting","formatted","render","backgroundColor","ChangeRequestStatusBtn","getChangeOption","option","fontSize","openSlideUp","refresh","statusToAction","Formatter","id","ChangeStatus","statusToTitle","mapDispatchToProps","dispatch","content","type"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { makeGetRequest, makePostRequest } from \"../api_calls\"\nimport queryString from \"query-string\"\nimport Timeline from \"../components/Timeline\"\nimport SlideUpPanel from \"../components/SlideUpPanel\"\nimport { connect } from \"react-redux\"\nimport MakeRecommendations from \"./MakeRecommendations\"\nimport UserInfo from \"./UserInfo\"\n\nexport default class ServeRequest extends Component {\n    constructor(props) {\n        super(props)\n        this.path = this.props.match.path\n        var params = queryString.parse(this.props.location.search)\n        console.log(params)\n        this.state = {\n            userSub: params.sub,\n            req_id: params.req_id,\n            request: [],\n            currStatus: 'request',\n            formatting: [],\n            recommendations: [],\n            formatted: []\n        }\n        makeGetRequest(`user-request?sub=${this.state.userSub}&req_id=${this.state.req_id}`, \n            (request) => {\n                this.setState({\n                    request: request\n                })\n            }\n        )\n\n        this.getRecommendations()\n\n        \n    }\n\n    getRecommendations = () => {\n        console.log('getting latest recommendations')\n        makeGetRequest(`admin-recommendations?sub=${this.state.userSub}&req_id=${this.state.req_id}`, \n            (recs) => {\n                console.log('recommendations:', recs)\n                this.setState({\n                    recommendations: recs\n                })\n            }\n        )\n\n    }\n\n    imageReceived = () => {\n        console.log('img received')\n    }\n\n    format = () => {\n        var canvas = document.getElementById(\"canvas\");\n        var context = canvas.getContext(\"2d\");\n        /*var img = new Image();\n        img.onload = function() {\n            console.log('image loaded')\n            //context.drawImage(this, 40, 40);\n            // call next step in your code here, f.ex: nextStep();\n        };\n        img.crossOrigin = 'Anonymous'\n        img.addEventListener(\"load\", this.imageReceived, false);\n        img.src = 'https://s3-eu-west-1.amazonaws.com/Adla-data/public/recommended_items/85e24393-57a0-40b5-bf8b-855d0c2519e6'//this.state.recommendations[0].img_urls[0];\n        */\n        var img = <img crossOrigin=\"anonymous\" src={'https://s3-eu-west-1.amazonaws.com/Adla-data/public/recommended_items/85e24393-57a0-40b5-bf8b-855d0c2519e6'}/>\n        \n        console.log('drawing img')\n        console.log(img)\n        context.drawImage(img, 40, 40);\n        var URL = canvas.toDataURL()\n        console.log(URL)\n\n        /*\n        setTimeout(\n            () =>{\n                var items = this.state.recommendations\n                items.map(\n                    (item, idx) => {\n                        console.log('formatter:', document.querySelector(`#formatter${idx}`))\n                        html2canvas(document.querySelector(`#formatter${idx}`),  \n                            { \n                                letterRendering: 1, \n                                allowTaint : true, \n                                scrollY: -window.scrollY,\n                                onrendered : function (canvas) { } \n                            }\n                        )\n\n                        .then(canvas => {\n                            document.querySelector('.body').appendChild(canvas)\n                            let URL = canvas.toDataURL()\n                            console.log('URL:', URL)\n                            this.setState({\n                                formatted:\n                                    [\n                                        {\n                                            dataURL: URL,\n                                            id: idx\n                                        },\n                                        ...this.state.formatted\n                                    ]\n                            })\n\n                        })\n                    }\n                )\n            },\n            2000\n        )\n        */\n    }\n\n    getFormatters = () => {   \n        if (this.state.recommendations.length == 0) {return null}       // before recommendations recieved\n        var items = this.state.recommendations\n        return items.map(\n            (item, idx) => {\n                item = {\n                    idx,\n                    src: item.img_urls[0],\n                    price: `$${100*idx}`\n                }\n                return <Formatter id={`formatter${idx}`} item={item} />\n            }\n        )\n    }\n\n    sendRecommendations = () => {\n        var loc = window.location.search\n        var params = queryString.parse(loc)\n        var sub = params.sub\n        var req_id = params.req_id\n        var recs = this.state.recommendations\n        console.log('RECS:', recs)\n        recs = recs.filter((rec) => {return rec.status == 'not yet recommended'})\n        console.log('recs to recommend:', recs)\n        var body = {recs, action: 'recommend'}\n        makePostRequest(`update-recommendation?req_id=${req_id}&sub=${sub}`, body,\n            () => {\n                console.log('recommendation made') \n                this.getRecommendations()\n            }\n        )\n    }\n\n    render () {\n        return (\n            <React.Fragment >\n                <div className=\"body\">\n                    <div className=\"large\">\n                        Request\n                    </div>\n                    <UserInfo />\n                    <Timeline request={this.state.request} recommendations={this.state.recommendations} refresh={this.getRecommendations}/>\n                    <ChangeRequestStatusBtn currStatus={this.state.currStatus} refresh={this.getRecommendations}/>\n                    {/*<button className=\"btn\" onClick={this.format} id='format'>Format</button>\n                    <canvas id=\"canvas\" width=\"336\" height=\"336\"></canvas>/*}\n                    {/*this.getFormatters()*/}\n                    <button className=\"btn\" onClick={this.sendRecommendations} style={{backgroundColor: 'rgb(255, 0, 0, 0.5)'}}>Send these recommendations</button>\n                </div>\n                <SlideUpPanel />\n            </React.Fragment>\n        )\n    }\n}\n\nclass ChangeRequestStatusBtn extends Component {\n    constructor(props) {\n        super(props)\n        this.statusToAction = {\n            'request': 'Make recommendations!',\n            'making recs': 'keep making recommendations'\n        }\n    }\n\n    getChangeOption = () => {\n        var currStatus = this.props.currStatus\n        var option = !currStatus === \"request\" ? \n                <button className=\"btn\" style={{fontSize: \"12px\"}} onClick={() => this.props.openSlideUp(<ChangeStatus status={currStatus} refresh={this.props.refresh}/>)}>\n                    {this.statusToAction[currStatus]}\n                </button>\n                :\n                null\n    }\n\n    render () {\n        return (\n            <React.Fragment>\n                <button className=\"btn\" style={{fontSize: \"12px\"}} onClick={() => this.props.openSlideUp(<ChangeStatus refresh={this.props.refresh} />)}>\n                    Make recommendations\n                </button>\n                {this.getChangeOption()}\n            </React.Fragment>\n        )\n    }\n}\n\nconst Formatter = (props) => {\n    console.log('formatter props:', props)\n    if (!props.item) { \n        console.log('no item in props')\n        return null \n    }\n    const {idx, src, price} = props.item\n    console.log('SRC:', src)\n    return (\n        <div id={props.id} className=\"formatter\">\n            <div className=\"idx\">{`${idx + 1}.`}</div>\n            <img crossOrigin=\"Anonymous\" src={src} alt=\"\" className=\"img\" />\n            <div className='price'>{price}</div>\n        </div>\n    )\n}\n\n\n// SWITCH TO DETERMINE WHAT COMPONENT TO RENDER ON THE SLIDEUP PANEL\nconst ChangeStatus = (props) => {\n\n    const statusToTitle = {\n        'request': 'Make recommendations',\n        'making recs': 'Make recommendations'\n    }\n\n    switch (props.status) {\n        case 'request':\n            return (\n                <MakeRecommendations refresh={props.refresh}/>\n            )\n        default:\n            return <MakeRecommendations refresh={props.refresh}/>\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        openSlideUp: (content) => {\n            dispatch({\n                type: \"OPEN_SLIDEUP\",\n                content: content\n            })\n        }\n    }\n}\n\nChangeRequestStatusBtn = connect(null, mapDispatchToProps)(ChangeRequestStatusBtn)"]},"metadata":{},"sourceType":"module"}